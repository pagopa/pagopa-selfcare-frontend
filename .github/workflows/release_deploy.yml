name: Release And Deploy

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select the Environment
        options:
          - dev
          - uat
          - prod
      version:
        required: false
        type: choice
        description: Select the version
        options:
          - patch
          - skip_or_promote
          - new_release
          - breaking_change

permissions:
  packages: write
  contents: write
  issues: write
  id-token: write
  actions: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.get_semver.outputs.semver }}
      environment: ${{ steps.get_env.outputs.environment }}
    steps:
      - name: pull request rejected
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged != true
        run: |
          echo "❌ PR was closed without a merge"
          exit 1

      # Set Semvar
      - run: echo "SEMVER=patch" >> $GITHUB_ENV

      - if: ${{ (github.event.pull_request.merged && contains(github.event.pull_request.labels.*.name, 'breaking-change')) }}
        run: echo "SEMVER=major" >> $GITHUB_ENV

      # force semver if dev, !=main or skip release
      - if: ${{ inputs.version == 'new_release' }}
        run: echo "SEMVER=minor" >> $GITHUB_ENV

      - if: ${{ inputs.version == 'breaking_change' }}
        run: echo "SEMVER=major" >> $GITHUB_ENV

      - if: ${{ github.ref_name != 'main' }}
        run: echo "SEMVER=buildNumber" >> $GITHUB_ENV

      - if: ${{ inputs.version == 'skip_or_promote' }}
        run: echo "SEMVER=skip" >> $GITHUB_ENV

      - id: get_semver
        name: Set Output
        run: echo "semver=${{env.SEMVER}}" >> $GITHUB_OUTPUT

      # Set Environment
      - run: echo "ENVIRNOMENT=${{ inputs.environment}}" >> $GITHUB_ENV

      - if: ${{ inputs.environment == null || inputs.environment == '' }}
        run: echo "ENVIRNOMENT=dev" >> $GITHUB_ENV

      - id: get_env
        name: Set Output
        run: echo "environment=${{env.ENVIRNOMENT}}" >> $GITHUB_OUTPUT

  release:
    name: Create a New Release
    runs-on: ubuntu-latest
    needs: [ setup ]
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Make Release
        id: release
        uses: pagopa/github-actions-template/node-release@v1.10.5
        with:
          semver: ${{ needs.setup.outputs.semver }}
          github_token: ${{ secrets.BOT_TOKEN_GITHUB }}
          skip_ci: false

  deploy:
    runs-on: ubuntu-latest
    needs: [ setup, release ]
    name: Deploy ${{ needs.setup.outputs.environment }}
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout
        id: checkout
        # from https://github.com/actions/checkout/commits/main
        uses: actions/checkout@1f9a0c22da41e6ebfa534300ef656657ea2c6707
        with:
          persist-credentials: false

      - name: Set Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16.10.0

      - name: Build
        run: |
          export REACT_APP_ENV='${{ needs.setup.outputs.environment }}'
          export INLINE_RUNTIME_CHUNK='false'

          export REACT_APP_URL_FE_LOGIN='${{ vars.SELFCARE_HOST_FE }}/auth/login'
          export REACT_APP_URL_FE_LOGOUT='${{ vars.SELFCARE_HOST_FE }}/auth/logout'
          export REACT_APP_URL_FE_LANDING='${{ vars.SELFCARE_HOST_FE }}/auth/logout'
          export REACT_APP_URL_FE_ASSISTANCE='${{ vars.SELFCARE_HOST_FE }}/assistenza'
          export REACT_APP_URL_FE_SELFCARE='${{ vars.SELFCARE_HOST_FE }}/dashboard/'
          export REACT_APP_URL_FE_TOKEN_EXCHANGE='${{ vars.SELFCARE_HOST_FE }}/token-exchange'

          export REACT_APP_URL_API_TOKEN='${{ vars.SELFCARE_API_BE }}/api/token/token'
          export REACT_APP_URL_BACKOFFICE='${{ vars.SELFCARE_API_BE }}/backoffice/v1'
          export REACT_APP_PUBLIC_URL='/ui'
          export REACT_APP_URL_BETA='false'
          
          export REACT_APP_API_MOCK_BACKOFFICE='false'
          export REACT_APP_API_MOCK_TOKEN='false'
          
          export REACT_APP_URL_INSTITUTION_LOGO_PREFIX='${{ vars.REACT_APP_URL_STORAGE }}/institutions/'

          export REACT_APP_PAGOPA_HELP_EMAIL='assistenza@selfcare.it'
          export REACT_APP_MIXPANEL_TOKEN='${{ secrets.REACT_APP_MIXPANEL_TOKEN }}'
          export REACT_APP_ONE_TRUST_BASE_URL='${{ vars.SELFCARE_HOST_FE }}/ot/test'
          export REACT_APP_ONETRUST_DOMAIN_ID='${{ secrets.REACT_APP_ONETRUST_DOMAIN_ID }}'

          export REACT_APP_ANALYTICS_ENABLE='false'
          export REACT_APP_ANALYTICS_MOCKED='false'

          if [ "${{ needs.setup.outputs.environment }}" = "dev" ]; then
            export REACT_APP_FEATURES_FDR_ENABLED='true'
          fi

          if [ "${{ needs.setup.outputs.environment }}" = "uat" ]; then
            export REACT_APP_FEATURES_FDR_ENABLED='true'
          fi

          if [ "${{ needs.setup.outputs.environment }}" = "prod" ]; then
            export REACT_APP_FEATURES_FDR_ENABLED='false'
          fi

          yarn install
          yarn generate
          yarn build

      - name: Login
        id: login
        # from https://github.com/Azure/login/commits/master
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Deploy ${{ inputs.environment }}
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob sync --container '$web' --account-name ${{ vars.STORAGE_ACCOUNT }} -s "./build" --destination 'ui/' --connection-string '${{ secrets.BLOB_CONNECTION_STRING }}'


      - name: Purge
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az cdn endpoint purge -g ${{ vars.CDN_RESOURCE_GROUP }} -n ${{ vars.CDN_ENDPOINT }} --profile-name ${{ vars.CDN_PROFILE }} --content-paths "/ui" "/ui/*" "/"

  notify:
    needs: [ setup, release, deploy ]
    runs-on: ubuntu-latest
    name: Notify
    if: always()
    steps:
      - name: Report Status
        if: ${{ needs.setup.outputs.environment == 'prod' }}
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ needs.deploy.result }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: 'New Release on Production ${{ needs.release.outputs.version }} has {status_message}'
          message_format: '{emoji} <{run_url}|{workflow}> {status_message} in <{repo_url}|{repo}>'
          footer: 'Linked to <{workflow_url}| workflow file>'
          icon_success: ':white_check_mark:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
